/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DashboardConfiguration, Widget } from "./types";
export namespace Components {
    interface IotDashboard {
        /**
          * Width and height of the cell, in pixels
         */
        "cellSize": number;
        /**
          * The configurations which determines which widgets render where with what settings.
         */
        "dashboardConfiguration": DashboardConfiguration;
        /**
          * Callback that is fired every time the dashboard configuration has been altered.  When a widget is moved, resized, deleted, appended, or altered, then this method is called
         */
        "onDashboardConfigurationChange": (config: DashboardConfiguration) => void;
        /**
          * Whether the dashboard grid will stretch to fit.  If stretch to fit is false, the dashboard grid will be the width in pixels. If not enough room is present, it will utilize scrollbars to allow access to the entire grid.  If stretch to fit is true, the entire grid will scale proportionally to scale to the available space for the grid.
         */
        "stretchToFit": Boolean;
        /**
          * Width of the dashboard, in pixels
         */
        "width": number;
    }
    interface IotDashboardWidget {
        "cellSize": number;
        "isSelected": boolean;
        "widget": Widget;
        "width": number;
    }
    interface TestingGround {
    }
}
declare global {
    interface HTMLIotDashboardElement extends Components.IotDashboard, HTMLStencilElement {
    }
    var HTMLIotDashboardElement: {
        prototype: HTMLIotDashboardElement;
        new (): HTMLIotDashboardElement;
    };
    interface HTMLIotDashboardWidgetElement extends Components.IotDashboardWidget, HTMLStencilElement {
    }
    var HTMLIotDashboardWidgetElement: {
        prototype: HTMLIotDashboardWidgetElement;
        new (): HTMLIotDashboardWidgetElement;
    };
    interface HTMLTestingGroundElement extends Components.TestingGround, HTMLStencilElement {
    }
    var HTMLTestingGroundElement: {
        prototype: HTMLTestingGroundElement;
        new (): HTMLTestingGroundElement;
    };
    interface HTMLElementTagNameMap {
        "iot-dashboard": HTMLIotDashboardElement;
        "iot-dashboard-widget": HTMLIotDashboardWidgetElement;
        "testing-ground": HTMLTestingGroundElement;
    }
}
declare namespace LocalJSX {
    interface IotDashboard {
        /**
          * Width and height of the cell, in pixels
         */
        "cellSize"?: number;
        /**
          * The configurations which determines which widgets render where with what settings.
         */
        "dashboardConfiguration"?: DashboardConfiguration;
        /**
          * Callback that is fired every time the dashboard configuration has been altered.  When a widget is moved, resized, deleted, appended, or altered, then this method is called
         */
        "onDashboardConfigurationChange"?: (config: DashboardConfiguration) => void;
        /**
          * Whether the dashboard grid will stretch to fit.  If stretch to fit is false, the dashboard grid will be the width in pixels. If not enough room is present, it will utilize scrollbars to allow access to the entire grid.  If stretch to fit is true, the entire grid will scale proportionally to scale to the available space for the grid.
         */
        "stretchToFit"?: Boolean;
        /**
          * Width of the dashboard, in pixels
         */
        "width"?: number;
    }
    interface IotDashboardWidget {
        "cellSize"?: number;
        "isSelected"?: boolean;
        "widget"?: Widget;
        "width"?: number;
    }
    interface TestingGround {
    }
    interface IntrinsicElements {
        "iot-dashboard": IotDashboard;
        "iot-dashboard-widget": IotDashboardWidget;
        "testing-ground": TestingGround;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "iot-dashboard": LocalJSX.IotDashboard & JSXBase.HTMLAttributes<HTMLIotDashboardElement>;
            "iot-dashboard-widget": LocalJSX.IotDashboardWidget & JSXBase.HTMLAttributes<HTMLIotDashboardWidgetElement>;
            "testing-ground": LocalJSX.TestingGround & JSXBase.HTMLAttributes<HTMLTestingGroundElement>;
        }
    }
}
