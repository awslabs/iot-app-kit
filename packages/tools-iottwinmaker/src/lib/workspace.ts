import {
  CreateWorkspaceCommandOutput,
  GetWorkspaceCommandOutput,
  ResourceNotFoundException,
  ValidationException,
} from '@aws-sdk/client-iottwinmaker';
import { delay, replaceTemplateVars, regionToAirportCode } from './utils';
import { getDefaultAwsClients as aws } from './aws-clients';
import { WORKSPACE_ROLE_ASSUME_POLICY } from './policy/workspace-role-assume-policy';
import { WORKSPACE_DASHBOARD_ROLE_ASSUME_POLICY } from './policy/workspace-dashboard-role-assume-policy';
import { workspaceRolePolicyTemplate } from './policy/workspace-role-policy';
import { workspaceDashboardRolePolicyTemplate } from './policy/workspace-dashboard-role-policy';
import { CreatePolicyCommandOutput, CreateRoleCommandOutput } from '@aws-sdk/client-iam';
import { CreateBucketCommandOutput, CreateBucketRequest } from '@aws-sdk/client-s3';

/**
 * Helper function during workspace creation to create and attach roles and policies
 * @param workspaceId workspaceId used as part identifier for the role and policy
 * @param accountId accountId used as part identifier for the role and policy
 * @param region region used as part identifier for the role and policy
 * @param roleType Role or DashboardRole
 * @param roleAssumePolicy stringified JSON of the policy
 * @param rolePolicy stringified JSON of the role
 * @returns promise of the roleArn
 */
async function createRoleAndPolicy(
  workspaceId: string,
  accountId: string,
  region: string,
  roleType: 'WorkspaceRole' | 'WorkspaceDashboardRole',
  roleAssumePolicy: string,
  rolePolicy: string
) {
  let roleName;
  let policyName;
  if (roleType === 'WorkspaceRole') {
    roleName = `twinmaker-workspace-${workspaceId}-${accountId}-${region}`.toLowerCase();
    policyName = `twinmaker-workspace-${workspaceId}-${accountId}-${region}-AutoPolicy`.toLowerCase();
  } else if (roleType === 'WorkspaceDashboardRole') {
    roleName = `twinmaker-${roleType}-${workspaceId}-${accountId}-${region}`.toLowerCase();
    policyName = `twinmaker-${roleType}-${workspaceId}-${accountId}-${region}-AutoPolicy`.toLowerCase();
  }
  console.log(`Creating Role ${roleName}...`);
  const createRoleResponse: CreateRoleCommandOutput = await aws().iam.createRole({
    RoleName: roleName,
    Path: '/',
    AssumeRolePolicyDocument: roleAssumePolicy,
    Description: `${roleType} generated by AWS IoT TwinMaker TMDT`,
  });
  if (!createRoleResponse.Role || !createRoleResponse.Role.Arn) {
    throw new Error(`Failed to create role ${roleName}.`);
  }
  const roleArn: string = createRoleResponse.Role.Arn;
  console.log(`Created Role: ${roleArn}.`);

  const createPolicyResponse: CreatePolicyCommandOutput = await aws().iam.createPolicy({
    PolicyName: policyName,
    PolicyDocument: rolePolicy,
    Description: `${roleType} Policy generated by AWS IoT TwinMaker TMDT`,
  });
  if (!createPolicyResponse.Policy || !createPolicyResponse.Policy.Arn) {
    throw new Error(`Failed to create policy for role ${roleArn}.`);
  }
  const policyArn: string | undefined = createPolicyResponse.Policy.Arn;
  console.log(`Created Policy: ${policyArn}`);

  await aws().iam.attachRolePolicy({
    RoleName: roleName,
    PolicyArn: policyArn,
  });
  console.log(`Attached Policy: ${policyArn} to Role: ${roleArn}.`);
  return roleArn;
}
/**
 * Helper function for creating s3 Buckets with versioning, policies, access block, and public encryption
 * @param s3BucketName Bucket name
 * @param region workspace region
 */
async function createS3Bucket(s3BucketName: string, region: string): Promise<void> {
  const params: CreateBucketRequest = {
    Bucket: s3BucketName,
  };
  /**
   * @see https://stackoverflow.com/questions/51912072/invalidlocationconstraint-error-while-creating-s3-bucket-when-the-used-command-i
   *
   * tl;dr - `us-east-1` is considered a special default region so LocationConstraint is
   *  not required/accepted
   */
  if (region !== 'us-east-1') {
    params.CreateBucketConfiguration = {
      LocationConstraint: region,
    };
  }
  const createBucketResponse: CreateBucketCommandOutput = await aws().s3.createBucket(params);
  await aws().s3.putBucketVersioning({
    Bucket: s3BucketName,
    VersioningConfiguration: {
      Status: 'Enabled',
    },
  });
  const s3BucketPolicy = {
    Statement: [
      {
        Action: 's3:*',
        Effect: 'Deny',
        Principal: '*',
        Resource: [`arn:aws:s3:::${s3BucketName}`, `arn:aws:s3:::${s3BucketName}/*`],
        Condition: {
          Bool: { 'aws:SecureTransport': false },
        },
      },
    ],
  };
  await aws().s3.putBucketPolicy({
    Bucket: s3BucketName,
    Policy: JSON.stringify(s3BucketPolicy),
  });
  await aws().s3.putPublicAccessBlock({
    Bucket: s3BucketName,
    PublicAccessBlockConfiguration: {
      BlockPublicAcls: true,
      BlockPublicPolicy: true,
      IgnorePublicAcls: true,
      RestrictPublicBuckets: true,
    },
  });
  await aws().s3.putBucketEncryption({
    Bucket: s3BucketName,
    ServerSideEncryptionConfiguration: {
      Rules: [
        {
          ApplyServerSideEncryptionByDefault: {
            SSEAlgorithm: 'AES256',
          },
        },
      ],
    },
  });
  console.log(`S3 Bucket created: ${createBucketResponse.Location}`);
}

/**
 * Helper function during workspace creation to create workspace S3 bucket, configure CORS policy, and enable bucket logging
 * @param workspaceId workspaceId used as part identifier for the bucket name
 * @param accountId accountId used as part identifier for the bucket name
 * @param region region used as part identifier for the bucket name
 * @returns promise of the S3 bucket name and arn
 */
async function createWorkspaceS3Bucket(workspaceId: string, accountId: string, region: string) {
  const s3BucketName = `twinmaker-workspace-${workspaceId}-${accountId}-${regionToAirportCode(region)}`.toLowerCase();
  console.log(`Creating S3 Bucket for the TwinMaker Workspace in region: ${region}...`);
  await createS3Bucket(s3BucketName, region);
  console.log('Configuring CORS Policy...');
  await aws().s3.putBucketCors({
    Bucket: s3BucketName,
    CORSConfiguration: {
      CORSRules: [
        {
          AllowedHeaders: ['*'],
          AllowedMethods: ['GET', 'PUT', 'POST', 'DELETE', 'HEAD'],
          AllowedOrigins: ['*'],
          ExposeHeaders: ['ETag'],
        },
      ],
    },
  });
  console.log('CORS Policy configured');
  console.log('Creating bucket for access logging...');
  const s3LoggingBucketName = `${s3BucketName}-logs`;
  await createS3Bucket(s3LoggingBucketName, region);
  console.log('Enabling access logging for workspace S3 Bucket...');
  await aws().s3.putBucketAcl({
    Bucket: s3LoggingBucketName,
    GrantReadACP: 'URI=http://acs.amazonaws.com/groups/s3/LogDelivery',
    GrantWrite: 'URI=http://acs.amazonaws.com/groups/s3/LogDelivery',
  });
  await aws().s3.putBucketLogging({
    Bucket: s3BucketName,
    BucketLoggingStatus: {
      LoggingEnabled: {
        TargetBucket: s3LoggingBucketName,
        TargetPrefix: 'logs/',
      },
    },
  });
  console.log('Access logging enabled.');
  return { s3BucketName, s3BucketArn: `arn:aws:s3:::${s3BucketName}` };
}

/**
 * Helper function to retry workspace creation during role propagation
 * @param workspaceId workspaceId
 * @param workspaceRoleArn newly created workspace role arn
 * @param s3BucketArn newly created workspace s3 bucket arn
 * @param attempts number of attempts to retry
 * @returns promise of the workspace arn if successfully created
 */
async function retryWorkspaceCreation(
  workspaceId: string,
  workspaceRoleArn: string,
  s3BucketArn: string,
  attempts: number
) {
  while (attempts > 0) {
    try {
      attempts--;
      const createWorkspaceResponse: CreateWorkspaceCommandOutput = await aws().tm.createWorkspace({
        workspaceId,
        role: workspaceRoleArn,
        s3Location: s3BucketArn,
      });
      const workspaceArn: string | undefined = createWorkspaceResponse.arn;
      if (!workspaceArn) {
        throw new Error('Failed to create Workspace');
      }
      console.log(`Created Workspace: ${workspaceArn}`);
      return workspaceArn;
    } catch (err) {
      if (
        (err instanceof ValidationException && err.message.includes('Could not assume the role provided')) ||
        (err instanceof ValidationException && err.message.includes('Could not access S3 with the role provided'))
      ) {
        console.log('Waiting for the newly created role to be propagated...');
        await delay(2000);
      } else {
        throw err;
      }
    }
  }
  throw new Error('Retry exhausted');
}

/**
 * Driver function for workspace creation
 * @param workspaceId workspace-id to be created
 * @returns promise of workspace arn, s3 arn, role arn, dashboardrole arn
 */
async function prepareWorkspace(workspaceId: string) {
  const region: string = aws().region;
  const { accountId, accountArn } = await aws().getCurrentIdentity();
  const { s3BucketArn } = await createWorkspaceS3Bucket(workspaceId, accountId, region);

  const policyParams: Record<string, string> = {
    accountId,
    accountArn,
    region,
    workspaceId,
    workspaceS3BucketArn: s3BucketArn,
  };

  const workspaceRolePolicy: string = replaceTemplateVars(JSON.stringify(workspaceRolePolicyTemplate), policyParams);

  const workspaceRoleArn: string = await createRoleAndPolicy(
    workspaceId,
    accountId,
    regionToAirportCode(region),
    'WorkspaceRole',
    JSON.stringify(WORKSPACE_ROLE_ASSUME_POLICY),
    workspaceRolePolicy
  );
  // retry workspace creation up to 10 times to allow role to propagate
  const workspaceArn: string = await retryWorkspaceCreation(workspaceId, workspaceRoleArn, s3BucketArn, 10);

  policyParams.workspaceArn = workspaceArn;
  policyParams.dashboardRoleAssumedByArn = accountArn;
  const workspaceDashboardRoleAssumePolicy: string = replaceTemplateVars(
    JSON.stringify(WORKSPACE_DASHBOARD_ROLE_ASSUME_POLICY),
    policyParams
  );
  const workspaceDashboardRolePolicy: string = replaceTemplateVars(
    JSON.stringify(workspaceDashboardRolePolicyTemplate),
    policyParams
  );
  console.log(
    '\nWARNING: Dashboard role policy will be created without video permissions. Please either edit the policy in IAM or create workspace in console to self-define any additional permissions.\n'
  );
  const workspaceDashboardRoleArn: string = await createRoleAndPolicy(
    workspaceId,
    accountId,
    regionToAirportCode(region),
    'WorkspaceDashboardRole',
    workspaceDashboardRoleAssumePolicy,
    workspaceDashboardRolePolicy
  );

  return {
    workspaceArn,
    workspaceS3BucketArn: s3BucketArn,
    workspaceRoleArn,
    workspaceDashboardRoleArn,
  };
}

/**
 * Create a workspace if it does not already exist
 * @param workspaceId workspace-id to be created
 * @returns promise of workspace id and arn if created successfully
 */
async function createWorkspaceIfNotExists(workspaceId: string) {
  let workspace: GetWorkspaceCommandOutput;
  console.log(`Creating a new Workspace: ${workspaceId}`);
  try {
    workspace = await aws().tm.getWorkspace({ workspaceId });
    console.log(`Found an existing Workspace with the same Id. Skip creating Workspace.`);
  } catch (e) {
    if (e instanceof ResourceNotFoundException) {
      await prepareWorkspace(workspaceId);
      workspace = await aws().tm.getWorkspace({ workspaceId });
    } else {
      throw new Error(`Failed to get workspace. ${e}`);
    }
  }
  if (!workspace.workspaceId) {
    throw new Error('Unable to get a valid workspace');
  }
  return {
    workspaceId,
    workspaceArn: workspace.arn,
  };
}

export { createWorkspaceIfNotExists };
