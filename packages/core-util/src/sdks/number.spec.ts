import { round, isNumeric } from './number';

describe.each`
  value            | preciseValue
  ${0.00345678}    | ${'0.00345678'}
  ${0.02345678}    | ${'0.02345678'}
  ${0.1111111111}  | ${'0.1111111111'}
  ${1.02345678}    | ${'1.02345678'}
  ${4.9777}        | ${'4.9777'}
  ${4.98500000001} | ${'4.98500000001'}
  ${10.02345678}   | ${'10.02345678'}
  ${1}             | ${'1'}
  ${1.0}           | ${'1'}
  ${1111.11111111} | ${'1111.11111111'}
  ${1.2}           | ${'1.2'}
  ${1.29}          | ${'1.29'}
  ${1.129}         | ${'1.129'}
  ${1000.1234}     | ${'1000.1234'}
  ${1000.12345}    | ${'1000.12345'}
  ${1000.02345}    | ${'1000.02345'}
  ${1000.003456}   | ${'1000.003456'}
  ${1000.000056}   | ${'1000.000056'}
  ${0.00001234567} | ${'0.00001234567'}
  ${-0.00345678}   | ${'-0.00345678'}
  ${-0.02345678}   | ${'-0.02345678'}
  ${-1.0}          | ${'-1'}
  ${-1.2}          | ${'-1.2'}
  ${-1.29}         | ${'-1.29'}
  ${-1.129}        | ${'-1.129'}
  ${-4.9777}       | ${'-4.9777'}
  ${-1000.1234}    | ${'-1000.1234'}
  ${-1000.12345}   | ${'-1000.12345'}
  ${-1000.02345}   | ${'-1000.02345'}
  ${-1000.003456}  | ${'-1000.003456'}
  ${-1000.000056}  | ${'-1000.000056'}
  ${NaN}           | ${'NaN'}
  ${Infinity}      | ${'Infinity'}
  ${-Infinity}     | ${'-Infinity'}
  ${-0}            | ${'0'}
  ${0.0}           | ${'0'}
`('returns number if no percision given', ({ value, preciseValue }) => {
  test(`round(${value}) => ${preciseValue}`, () => {
    expect(round(value)).toBe(preciseValue);
  });
});

describe.each`
  value            | preciseValue
  ${0.00345678}    | ${'0.00'}
  ${0.02345678}    | ${'0.02'}
  ${0.1111111111}  | ${'0.11'}
  ${1.02345678}    | ${'1.02'}
  ${4.9777}        | ${'4.98'}
  ${4.98500000001} | ${'4.99'}
  ${10.02345678}   | ${'10.02'}
  ${1}             | ${'1.00'}
  ${1.0}           | ${'1.00'}
  ${1111.11111111} | ${'1111.11'}
  ${1.2}           | ${'1.20'}
  ${1.29}          | ${'1.29'}
  ${1.129}         | ${'1.13'}
  ${1000.1234}     | ${'1000.12'}
  ${1000.12345}    | ${'1000.12'}
  ${1000.02345}    | ${'1000.02'}
  ${1000.003456}   | ${'1000.00'}
  ${1000.000056}   | ${'1000.00'}
  ${0.00001234567} | ${'0.00'}
  ${-0.00345678}   | ${'-0.00'}
  ${-0.02345678}   | ${'-0.02'}
  ${-1.0}          | ${'-1.00'}
  ${-1.2}          | ${'-1.20'}
  ${-1.29}         | ${'-1.29'}
  ${-1.129}        | ${'-1.13'}
  ${-4.9777}       | ${'-4.98'}
  ${-1000.1234}    | ${'-1000.12'}
  ${-1000.12345}   | ${'-1000.12'}
  ${-1000.02345}   | ${'-1000.02'}
  ${-1000.003456}  | ${'-1000.00'}
  ${-1000.000056}  | ${'-1000.00'}
  ${NaN}           | ${'NaN'}
  ${Infinity}      | ${'Infinity'}
  ${-Infinity}     | ${'-Infinity'}
  ${-0}            | ${'0.00'}
  ${0.0}           | ${'0.00'}
`('rounds number to specific percision of 2', ({ value, preciseValue }) => {
  test(`round(${value}) => ${preciseValue}`, () => {
    expect(round(value, 2)).toBe(preciseValue);
  });
});

describe.each`
  value            | preciseValue
  ${0.00345678}    | ${'0'}
  ${0.02345678}    | ${'0'}
  ${0.1111111111}  | ${'0'}
  ${1.02345678}    | ${'1'}
  ${4.9777}        | ${'5'}
  ${4.98500000001} | ${'5'}
  ${10.02345678}   | ${'10'}
  ${1}             | ${'1'}
  ${1.0}           | ${'1'}
  ${1111.11111111} | ${'1111'}
  ${1.2}           | ${'1'}
  ${1.29}          | ${'1'}
  ${1.129}         | ${'1'}
  ${1000.1234}     | ${'1000'}
  ${1000.12345}    | ${'1000'}
  ${1000.02345}    | ${'1000'}
  ${1000.003456}   | ${'1000'}
  ${1000.000056}   | ${'1000'}
  ${0.00001234567} | ${'0'}
  ${-0.00345678}   | ${'-0'}
  ${-0.02345678}   | ${'-0'}
  ${-1.0}          | ${'-1'}
  ${-1.2}          | ${'-1'}
  ${-1.29}         | ${'-1'}
  ${-1.129}        | ${'-1'}
  ${-4.9777}       | ${'-5'}
  ${-1000.1234}    | ${'-1000'}
  ${-1000.12345}   | ${'-1000'}
  ${-1000.02345}   | ${'-1000'}
  ${-1000.003456}  | ${'-1000'}
  ${-1000.000056}  | ${'-1000'}
  ${NaN}           | ${'NaN'}
  ${Infinity}      | ${'Infinity'}
  ${-Infinity}     | ${'-Infinity'}
  ${-0}            | ${'0'}
  ${0.0}           | ${'0'}
`('rounds number to integer for percision 0', ({ value, preciseValue }) => {
  test(`round(${value}) => ${preciseValue}`, () => {
    expect(round(value, 0)).toBe(preciseValue);
  });
});

describe.each`
  value           | expected
  ${'test'}       | ${false}
  ${['test']}     | ${false}
  ${new Date()}   | ${false}
  ${NaN}          | ${false}
  ${'NaN'}        | ${false}
  ${Infinity}     | ${true}
  ${-Infinity}    | ${true}
  ${+Infinity}    | ${true}
  ${'Infinity'}   | ${true}
  ${'-Infinity'}  | ${true}
  ${'+Infinity'}  | ${true}
  ${0}            | ${true}
  ${-0}           | ${true}
  ${+0}           | ${true}
  ${123.2312}     | ${true}
  ${+123.2312}    | ${true}
  ${-123.2312}    | ${true}
  ${-123.23e2}    | ${true}
  ${+123.23e2}    | ${true}
  ${+123.23e-2}   | ${true}
  ${'0'}          | ${true}
  ${'-0'}         | ${true}
  ${'+0'}         | ${true}
  ${'123.2312'}   | ${true}
  ${'+123.2312'}  | ${true}
  ${'-123.2312'}  | ${true}
  ${'23e2'}       | ${true}
  ${'23.23e2'}    | ${true}
  ${'-123.23e2'}  | ${true}
  ${'-123.23e+2'} | ${true}
  ${'-123.23e-2'} | ${true}
  ${'+123.23e2'}  | ${true}
  ${'+123.23e-2'} | ${true}
  ${'+123.23e+2'} | ${true}
`('should return true if value is numeric', ({ value, expected }) => {
  test(`isNumeric(${value}) => ${expected}`, () => {
    expect(isNumeric(value)).toBe(expected);
  });
});
