// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render correct panels. DynamicSelect should render Dynamic Select correctly with existing options 1`] = `
<div>
  <div
    data-mocked="Select"
    options="[{\\"label\\":\\"10 units\\",\\"value\\":\\"10\\"},{\\"label\\":\\"20 units\\",\\"value\\":\\"20\\"},{\\"label\\":\\"30 units\\",\\"value\\":\\"30\\"}]"
    selectedoption="{\\"label\\":\\"10 units\\",\\"value\\":\\"10\\"}"
  />
</div>
`;

exports[`render correct panels. DynamicSelect should render Dynamic Select correctly with new option 1`] = `
<div>
  <div
    data-mocked="Select"
    options="[{\\"label\\":\\"10 units\\",\\"value\\":\\"10\\"},{\\"label\\":\\"15 units\\",\\"value\\":\\"15\\"},{\\"label\\":\\"20 units\\",\\"value\\":\\"20\\"},{\\"label\\":\\"30 units\\",\\"value\\":\\"30\\"}]"
    selectedoption="{\\"label\\":\\"15 units\\",\\"value\\":\\"15\\"}"
  />
</div>
`;

exports[`render correct panels. render ExpandableInfoSection correctly 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": .c1 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c0 {
  border-bottom: 1px solid colorBorderDividerDefault;
}

.c0 > div:first-child {
  background-color: colorBackgroundContainerHeader;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<body>
    <div>
      <div
        class="c0"
        data-mocked="ExpandableSection"
      >
        <div>
          <div
            class="c1"
          >
            <div
              data-mocked="TextContent"
            >
              <strong>
                testTile
              </strong>
            </div>
          </div>
        </div>
        <div
          data-mocked="Box"
          padding="{\\"left\\":\\"m\\",\\"right\\":\\"m\\",\\"top\\":\\"xxs\\",\\"bottom\\":\\"xxs\\"}"
        >
          <div
            data-mocked="SpaceBetween"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": .c1 {
  width: 100%;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.c0 {
  border-bottom: 1px solid colorBorderDividerDefault;
}

.c0 > div:first-child {
  background-color: colorBackgroundContainerHeader;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

<div>
    <div
      class="c0"
      data-mocked="ExpandableSection"
    >
      <div>
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <strong>
              testTile
            </strong>
          </div>
        </div>
      </div>
      <div
        data-mocked="Box"
        padding="{\\"left\\":\\"m\\",\\"right\\":\\"m\\",\\"top\\":\\"xxs\\",\\"bottom\\":\\"xxs\\"}"
      >
        <div
          data-mocked="SpaceBetween"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`render correct panels. render Matrix3XInputGrid correctly. 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
}

.c1 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  padding-right: 8px;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<div>
  <div
    data-mocked="Box"
  >
    <div
      data-mocked="Box"
      margin="{\\"bottom\\":\\"xxs\\"}"
    >
      <label
        id="gridName_label"
      >
        gridName
      </label>
    </div>
     
    <div
      data-mocked="Grid"
      griddefinition="[{\\"colspan\\":4},{\\"colspan\\":4},{\\"colspan\\":4}]"
    >
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l1"
            >
              l1
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            arialabelledby="gridName_input_l1 gridName_label"
            controlid="gridName_input_l1"
            data-mocked="Input"
            value="1"
          />
        </div>
      </div>
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l2"
            >
              l2
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            arialabelledby="gridName_input_l2 gridName_label"
            controlid="gridName_input_l2"
            data-mocked="Input"
            value="2"
          />
        </div>
      </div>
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l3"
            >
              l3
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            arialabelledby="gridName_input_l3 gridName_label"
            controlid="gridName_input_l3"
            data-mocked="Input"
            value="3"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`render correct panels. render Matrix3XInputGrid readonly correctly. 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: baseline;
  -webkit-box-align: baseline;
  -ms-flex-align: baseline;
  align-items: baseline;
  -webkit-align-content: center;
  -ms-flex-line-pack: center;
  align-content: center;
}

.c1 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  padding-right: 8px;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

<div>
  <div
    data-mocked="Box"
  >
    <div
      data-mocked="Box"
      margin="{\\"bottom\\":\\"xxs\\"}"
    >
      <label
        id="gridName_label"
      >
        gridName
      </label>
    </div>
     
    <div
      data-mocked="Grid"
      griddefinition="[{\\"colspan\\":4},{\\"colspan\\":4},{\\"colspan\\":4}]"
    >
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l1"
            >
              l1
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            data-mocked="TextContent"
          >
             
            1
             
          </div>
        </div>
      </div>
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l2"
            >
              l2
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            data-mocked="TextContent"
          >
             
            2
             
          </div>
        </div>
      </div>
      <div
        class="c0"
      >
        <div
          class="c1"
        >
          <div
            data-mocked="TextContent"
          >
            <label
              for="gridName_input_l3"
            >
              l3
            </label>
             
          </div>
        </div>
        <div
          class="c2"
        >
          <div
            data-mocked="TextContent"
          >
             
            3
             
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;
