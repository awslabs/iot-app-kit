// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`StateManager > should load dynamic scene correctly 1`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;

exports[`StateManager > should load dynamic scene with error for empty document 1`] = `
<SceneLayout
  LoadingView={
    <Provider>
      <LoadingProgress />
    </Provider>
  }
  externalLibraryConfig={{}}
  isViewing={false}
  onPointerMissed={[Function]}
/>
`;

exports[`StateManager > should load dynamic scene with error for getting scene entity failure 1`] = `
<SceneLayout
  LoadingView={
    <Provider>
      <LoadingProgress />
    </Provider>
  }
  externalLibraryConfig={{}}
  isViewing={false}
  onPointerMissed={[Function]}
/>
`;

exports[`StateManager > should render correctly 1`] = `
<SceneLayout
  LoadingView={
    <Provider>
      <LoadingProgress />
    </Provider>
  }
  externalLibraryConfig={{}}
  isViewing={false}
  onPointerMissed={[Function]}
/>
`;

exports[`StateManager > should render correctly with Matterport configuration 1`] = `
<SceneLayout
  LoadingView={
    <Provider>
      <LoadingProgress />
    </Provider>
  }
  externalLibraryConfig={
    {
      "matterport": {
        "accessToken": "mockAccessToken",
        "applicationKey": "mockApplicationKey",
        "modelId": "mockMatterportModelId",
      },
    }
  }
  isViewing={false}
  onPointerMissed={[Function]}
/>
`;

exports[`StateManager > should render with Failed to fetch scene content 1`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;

exports[`StateManager > should render with empty scene url error 1`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;

exports[`StateManager > should render with empty scene url error 2`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;

exports[`StateManager > should render with fetch scene content API error 1`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;

exports[`StateManager > should render with get scene uri error 1`] = `
<div>
  <scenelayout
    externallibraryconfig="[object Object]"
    loadingview="[object Object]"
  />
</div>
`;
