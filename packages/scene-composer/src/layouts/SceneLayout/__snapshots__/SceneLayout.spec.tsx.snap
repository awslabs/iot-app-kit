// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SceneLayout should not render camera preview if editing and non-camera component is on selectedNode 1`] = `
.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c7:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c6 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c15 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c12 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c11 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c3 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c13 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  />
  <div
    className="c2"
    data-mocked="Box"
  >
    <div
      className="c3"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c4"
      >
        <div
          className="c5"
        >
          <div
            className="c6"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c8"
      data-mocked="Box"
    >
      <div
        className="c9"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c10"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c11"
          >
            <div
              className="c12"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  Cannot convert undefined or null to object
                </p>
              </div>
            </div>
          </div>
          <div
            className="c2"
            data-mocked="Box"
          >
            <div
              className="c8"
              data-mocked="Box"
            >
              <div
                className="c10"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c13"
      data-mocked="Box"
    >
      <div
        className="c14"
      >
        <div
          className="c5"
        >
          <div
            className="c15"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`SceneLayout should render camera preview if editing and camera component is on selectedNode 1`] = `
.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c7:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c6 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c15 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c12 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c11 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c3 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c13 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  />
  <div
    className="c2"
    data-mocked="Box"
  >
    <div
      className="c3"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c4"
      >
        <div
          className="c5"
        >
          <div
            className="c6"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c8"
      data-mocked="Box"
    >
      <div
        className="c9"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c10"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c11"
          >
            <div
              className="c12"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  Cannot convert undefined or null to object
                </p>
              </div>
            </div>
          </div>
          <div
            className="c2"
            data-mocked="Box"
          >
            <div
              className="c8"
              data-mocked="Box"
            >
              <div
                className="c10"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c13"
      data-mocked="Box"
    >
      <div
        className="c14"
      >
        <div
          className="c5"
        >
          <div
            className="c15"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`SceneLayout should render correctly in Edit mode 1`] = `
.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c7:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c6 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c15 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c12 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c11 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c3 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c13 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  />
  <div
    className="c2"
    data-mocked="Box"
  >
    <div
      className="c3"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c4"
      >
        <div
          className="c5"
        >
          <div
            className="c6"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c8"
      data-mocked="Box"
    >
      <div
        className="c9"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c10"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c11"
          >
            <div
              className="c12"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  Cannot convert undefined or null to object
                </p>
              </div>
            </div>
          </div>
          <div
            className="c2"
            data-mocked="Box"
          >
            <div
              className="c8"
              data-mocked="Box"
            >
              <div
                className="c10"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c13"
      data-mocked="Box"
    >
      <div
        className="c14"
      >
        <div
          className="c5"
        >
          <div
            className="c15"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`SceneLayout should render correctly in Edit mode with Modal 1`] = `
.c6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c7 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c9 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c9:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c8 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c15 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c2 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c3 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c4 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c11 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c12 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c1 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c5 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c13 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
  >
    <div
      className="c2"
      data-mocked="Container"
    >
      <div>
        <div
          data-mocked="Header"
          variant="h2"
        >
          Notice
        </div>
      </div>
      <div>
        <div
          data-mocked="Box"
          float="right"
          padding="{\\"bottom\\":\\"s\\"}"
        >
          <div
            data-mocked="Button"
            onClick={[Function]}
            variant="primary"
          >
            Ok
          </div>
        </div>
      </div>
      <div
        data-mocked="SpaceBetween"
        size="s"
      >
        <div
          data-mocked="Box"
        />
      </div>
    </div>
  </div>
  <div
    className="c3"
    data-mocked="Box"
  />
  <div
    className="c4"
    data-mocked="Box"
  >
    <div
      className="c5"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c6"
      >
        <div
          className="c7"
        >
          <div
            className="c8"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c9"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c10"
      data-mocked="Box"
    >
      <div
        className="c11"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c12"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c1"
          >
            <div
              className="c2"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  Cannot convert undefined or null to object
                </p>
              </div>
            </div>
          </div>
          <div
            className="c4"
            data-mocked="Box"
          >
            <div
              className="c10"
              data-mocked="Box"
            >
              <div
                className="c12"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c13"
      data-mocked="Box"
    >
      <div
        className="c14"
      >
        <div
          className="c7"
        >
          <div
            className="c15"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c9"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`SceneLayout should render correctly in Viewing mode 1`] = `
.c3 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c4 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c6 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c6:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c5 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c7 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c9 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c2 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c15 {
  position: absolute;
  bottom: 0;
  right: 0;
  width: 16%;
  height: 16%;
  pointer-events: none;
  z-index: 1;
  color: colorTextHeadingDefault;
}

.c15 > svg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}

.c14 {
  shape-rendering: geometricPrecision;
  -webkit-transform: scale(1.04);
  -ms-transform: scale(1.04);
  transform: scale(1.04);
}

.c12 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  min-width: 40px;
  height: 40px;
  -webkit-text-decoration: none;
  text-decoration: none;
  cursor: pointer;
  pointer-events: initial;
  background-color: colorBackgroundDropdownItemDefault;
  border-top: 1px solid colorBorderDividerDefault;
}

.c12:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c12:first-of-type {
  border-top: 0;
}

.c17 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  min-width: 40px;
  height: 40px;
  -webkit-text-decoration: none;
  text-decoration: none;
  cursor: default;
  pointer-events: none;
  background-color: colorBackgroundItemSelected;
  border-top: 1px solid colorBorderDividerDefault;
}

.c17:first-of-type {
  border-top: 0;
}

.c11 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border-top: 3px solid colorBorderDividerDefault;
}

.c11:first-of-type {
  border-top: 0;
}

.c13 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 40px;
  height: 40px;
}

.c16 {
  display: none;
  position: absolute;
  left: 100%;
  top: 0;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  background-color: colorBackgroundDropdownItemDefault;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  z-index: 1;
}

.c16 > div {
  border-top: 1px solid colorBorderDividerDefault;
}

.c16 > div:first-of-type {
  border-top: 0;
}

.c18 {
  padding: 0 20px 0 0px;
  white-space: nowrap;
}

.c10 {
  position: absolute;
  left: 10px;
  top: 10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  z-index: 999;
  background-color: colorBackgroundDropdownItemDefault;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  >
    <div
      className="c2"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c3"
      >
        <div
          className="c4"
        >
          <div
            className="c5"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c6"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c7"
      data-mocked="Box"
    >
      <div
        className="c8"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c9"
        data-mocked="Box"
      >
        <div
          className="c10"
        >
          <div
            className="c11"
          >
            <div
              className="c11"
            >
              <div
                className="c12"
                data-testid="camera-controls-orbit"
                onPointerDown={[Function]}
                onPointerEnter={[Function]}
                onPointerLeave={[Function]}
                onPointerUp={[Function]}
              >
                <div
                  className="c13"
                >
                  <span
                    aria-label="Orbit"
                    role="img"
                    title="Orbit"
                  >
                    <div
                      className="c14"
                      data-mocked="Icon"
                      scale={1.04}
                      variant="normal"
                    >
                      <div>
                        <span>
                          <svg
                            height={16}
                            width={16}
                          >
                            <g
                              fill="none"
                            >
                              <path
                                d="M10.5 8.23c0 4.06-1.14 7.33-2.5 7.33s-2.5-3.35-2.5-7.5S6.62.56 8 .56c1 0 1.87 1.79 2.27 4.35"
                                stroke="currentColor"
                              />
                              <path
                                d="m9.23 8.61 1.21-2.18 1.28 2.14z"
                                fill="currentColor"
                              />
                              <path
                                d="M7.84 10.56C3.77 10.54.5 9.43.5 8.06s3.36-2.5 7.5-2.5c4.14 0 7.5 1.12 7.5 2.5 0 1-1.78 1.88-4.35 2.27"
                                stroke="currentColor"
                              />
                              <path
                                d="m7.46 9.29 2.17 1.22-2.14 1.27z"
                                fill="currentColor"
                              />
                            </g>
                          </svg>
                        </span>
                      </div>
                    </div>
                  </span>
                </div>
                <div
                  className="c15"
                >
                  <svg
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M16 0v16L0 0z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div
                  className="c16"
                >
                  <div
                    className="c17"
                    data-testid="camera-controls-orbit"
                    onPointerDown={[Function]}
                    onPointerEnter={[Function]}
                    onPointerLeave={[Function]}
                    onPointerUp={[Function]}
                  >
                    <div
                      className="c13"
                    >
                      <span
                        aria-label="Orbit"
                        role="img"
                        title="Orbit"
                      >
                        <div
                          className="c14"
                          data-mocked="Icon"
                          scale={1.04}
                          variant="normal"
                        >
                          <div>
                            <span>
                              <svg
                                height={16}
                                width={16}
                              >
                                <g
                                  fill="none"
                                >
                                  <path
                                    d="M10.5 8.23c0 4.06-1.14 7.33-2.5 7.33s-2.5-3.35-2.5-7.5S6.62.56 8 .56c1 0 1.87 1.79 2.27 4.35"
                                    stroke="currentColor"
                                  />
                                  <path
                                    d="m9.23 8.61 1.21-2.18 1.28 2.14z"
                                    fill="currentColor"
                                  />
                                  <path
                                    d="M7.84 10.56C3.77 10.54.5 9.43.5 8.06s3.36-2.5 7.5-2.5c4.14 0 7.5 1.12 7.5 2.5 0 1-1.78 1.88-4.35 2.27"
                                    stroke="currentColor"
                                  />
                                  <path
                                    d="m7.46 9.29 2.17 1.22-2.14 1.27z"
                                    fill="currentColor"
                                  />
                                </g>
                              </svg>
                            </span>
                          </div>
                        </div>
                      </span>
                    </div>
                    <div
                      className="c18"
                      color="inherit"
                      data-mocked="Box"
                      leftPadding={0}
                      variant="small"
                    >
                      3D Orbit
                    </div>
                  </div>
                  <div
                    className="c12"
                    data-testid="camera-controls-pan"
                    onPointerDown={[Function]}
                    onPointerEnter={[Function]}
                    onPointerLeave={[Function]}
                    onPointerUp={[Function]}
                  >
                    <div
                      className="c13"
                    >
                      <span
                        aria-label="Pan"
                        role="img"
                        title="Pan"
                      >
                        <div
                          className="c14"
                          data-mocked="Icon"
                          scale={1.04}
                          variant="normal"
                        >
                          <div>
                            <span>
                              <svg
                                height={14}
                                width={14}
                              >
                                <path
                                  d="M9.15 1.5a1 1 0 0 1 2 0m-4 0a1 1 0 1 1 2 0m2 2a1 1 0 0 1 2 0v5.9a4.1 4.1 0 0 1-4.1 4.1h-2A4.1 4.1 0 0 1 3.92 12l-2.8-3.34a1.21 1.21 0 0 1 .39-1.84 1.2 1.2 0 0 1 1.19.06l1.42.91h1V2.5a1 1 0 1 1 2 0m4.02 4.28.01-5.28m-2 5.28V1.5m-2 5.28V1.5"
                                  fill="none"
                                  stroke="currentColor"
                                />
                              </svg>
                            </span>
                          </div>
                        </div>
                      </span>
                    </div>
                    <div
                      className="c18"
                      color="inherit"
                      data-mocked="Box"
                      leftPadding={0}
                      variant="small"
                    >
                      3D Pan
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`SceneLayout should render correctly in Viewing mode with modal 1`] = `
.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c6 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c8 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c8:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c7 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c2 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c3 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c9 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c10 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c11 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c1 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c4 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c17 {
  position: absolute;
  bottom: 0;
  right: 0;
  width: 16%;
  height: 16%;
  pointer-events: none;
  z-index: 1;
  color: colorTextHeadingDefault;
}

.c17 > svg {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}

.c16 {
  shape-rendering: geometricPrecision;
  -webkit-transform: scale(1.04);
  -ms-transform: scale(1.04);
  transform: scale(1.04);
}

.c14 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  min-width: 40px;
  height: 40px;
  -webkit-text-decoration: none;
  text-decoration: none;
  cursor: pointer;
  pointer-events: initial;
  background-color: colorBackgroundDropdownItemDefault;
  border-top: 1px solid colorBorderDividerDefault;
}

.c14:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c14:first-of-type {
  border-top: 0;
}

.c19 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  justify-content: flex-start;
  min-width: 40px;
  height: 40px;
  -webkit-text-decoration: none;
  text-decoration: none;
  cursor: default;
  pointer-events: none;
  background-color: colorBackgroundItemSelected;
  border-top: 1px solid colorBorderDividerDefault;
}

.c19:first-of-type {
  border-top: 0;
}

.c13 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  border-top: 3px solid colorBorderDividerDefault;
}

.c13:first-of-type {
  border-top: 0;
}

.c15 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  width: 40px;
  height: 40px;
}

.c18 {
  display: none;
  position: absolute;
  left: 100%;
  top: 0;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  background-color: colorBackgroundDropdownItemDefault;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  z-index: 1;
}

.c18 > div {
  border-top: 1px solid colorBorderDividerDefault;
}

.c18 > div:first-of-type {
  border-top: 0;
}

.c20 {
  padding: 0 20px 0 0px;
  white-space: nowrap;
}

.c12 {
  position: absolute;
  left: 10px;
  top: 10px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  z-index: 999;
  background-color: colorBackgroundDropdownItemDefault;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
  >
    <div
      className="c2"
      data-mocked="Container"
    >
      <div>
        <div
          data-mocked="Header"
          variant="h2"
        >
          Notice
        </div>
      </div>
      <div>
        <div
          data-mocked="Box"
          float="right"
          padding="{\\"bottom\\":\\"s\\"}"
        >
          <div
            data-mocked="Button"
            onClick={[Function]}
            variant="primary"
          >
            Ok
          </div>
        </div>
      </div>
      <div
        data-mocked="SpaceBetween"
        size="s"
      >
        <div
          data-mocked="Box"
        />
      </div>
    </div>
  </div>
  <div
    className="c3"
    data-mocked="Box"
  >
    <div
      className="c4"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c5"
      >
        <div
          className="c6"
        >
          <div
            className="c7"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneHierarchyPanel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c8"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c9"
      data-mocked="Box"
    >
      <div
        className="c10"
        data-mocked="Box"
        padding="xxs"
      >
        <TopBar />
      </div>
      <div
        className="c11"
        data-mocked="Box"
      >
        <div
          className="c12"
        >
          <div
            className="c13"
          >
            <div
              className="c13"
            >
              <div
                className="c14"
                data-testid="camera-controls-orbit"
                onPointerDown={[Function]}
                onPointerEnter={[Function]}
                onPointerLeave={[Function]}
                onPointerUp={[Function]}
              >
                <div
                  className="c15"
                >
                  <span
                    aria-label="Orbit"
                    role="img"
                    title="Orbit"
                  >
                    <div
                      className="c16"
                      data-mocked="Icon"
                      scale={1.04}
                      variant="normal"
                    >
                      <div>
                        <span>
                          <svg
                            height={16}
                            width={16}
                          >
                            <g
                              fill="none"
                            >
                              <path
                                d="M10.5 8.23c0 4.06-1.14 7.33-2.5 7.33s-2.5-3.35-2.5-7.5S6.62.56 8 .56c1 0 1.87 1.79 2.27 4.35"
                                stroke="currentColor"
                              />
                              <path
                                d="m9.23 8.61 1.21-2.18 1.28 2.14z"
                                fill="currentColor"
                              />
                              <path
                                d="M7.84 10.56C3.77 10.54.5 9.43.5 8.06s3.36-2.5 7.5-2.5c4.14 0 7.5 1.12 7.5 2.5 0 1-1.78 1.88-4.35 2.27"
                                stroke="currentColor"
                              />
                              <path
                                d="m7.46 9.29 2.17 1.22-2.14 1.27z"
                                fill="currentColor"
                              />
                            </g>
                          </svg>
                        </span>
                      </div>
                    </div>
                  </span>
                </div>
                <div
                  className="c17"
                >
                  <svg
                    viewBox="0 0 16 16"
                  >
                    <path
                      d="M16 0v16L0 0z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div
                  className="c18"
                >
                  <div
                    className="c19"
                    data-testid="camera-controls-orbit"
                    onPointerDown={[Function]}
                    onPointerEnter={[Function]}
                    onPointerLeave={[Function]}
                    onPointerUp={[Function]}
                  >
                    <div
                      className="c15"
                    >
                      <span
                        aria-label="Orbit"
                        role="img"
                        title="Orbit"
                      >
                        <div
                          className="c16"
                          data-mocked="Icon"
                          scale={1.04}
                          variant="normal"
                        >
                          <div>
                            <span>
                              <svg
                                height={16}
                                width={16}
                              >
                                <g
                                  fill="none"
                                >
                                  <path
                                    d="M10.5 8.23c0 4.06-1.14 7.33-2.5 7.33s-2.5-3.35-2.5-7.5S6.62.56 8 .56c1 0 1.87 1.79 2.27 4.35"
                                    stroke="currentColor"
                                  />
                                  <path
                                    d="m9.23 8.61 1.21-2.18 1.28 2.14z"
                                    fill="currentColor"
                                  />
                                  <path
                                    d="M7.84 10.56C3.77 10.54.5 9.43.5 8.06s3.36-2.5 7.5-2.5c4.14 0 7.5 1.12 7.5 2.5 0 1-1.78 1.88-4.35 2.27"
                                    stroke="currentColor"
                                  />
                                  <path
                                    d="m7.46 9.29 2.17 1.22-2.14 1.27z"
                                    fill="currentColor"
                                  />
                                </g>
                              </svg>
                            </span>
                          </div>
                        </div>
                      </span>
                    </div>
                    <div
                      className="c20"
                      color="inherit"
                      data-mocked="Box"
                      leftPadding={0}
                      variant="small"
                    >
                      3D Orbit
                    </div>
                  </div>
                  <div
                    className="c14"
                    data-testid="camera-controls-pan"
                    onPointerDown={[Function]}
                    onPointerEnter={[Function]}
                    onPointerLeave={[Function]}
                    onPointerUp={[Function]}
                  >
                    <div
                      className="c15"
                    >
                      <span
                        aria-label="Pan"
                        role="img"
                        title="Pan"
                      >
                        <div
                          className="c16"
                          data-mocked="Icon"
                          scale={1.04}
                          variant="normal"
                        >
                          <div>
                            <span>
                              <svg
                                height={14}
                                width={14}
                              >
                                <path
                                  d="M9.15 1.5a1 1 0 0 1 2 0m-4 0a1 1 0 1 1 2 0m2 2a1 1 0 0 1 2 0v5.9a4.1 4.1 0 0 1-4.1 4.1h-2A4.1 4.1 0 0 1 3.92 12l-2.8-3.34a1.21 1.21 0 0 1 .39-1.84 1.2 1.2 0 0 1 1.19.06l1.42.91h1V2.5a1 1 0 1 1 2 0m4.02 4.28.01-5.28m-2 5.28V1.5m-2 5.28V1.5"
                                  fill="none"
                                  stroke="currentColor"
                                />
                              </svg>
                            </span>
                          </div>
                        </div>
                      </span>
                    </div>
                    <div
                      className="c20"
                      color="inherit"
                      data-mocked="Box"
                      leftPadding={0}
                      variant="small"
                    >
                      3D Pan
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
`;
