// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ViewCursorWidget should render correctly with edit style 1`] = `
.c13 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c11 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c12 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c3 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c14 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-box-pack: right;
  -webkit-justify-content: right;
  -ms-flex-pack: right;
  justify-content: right;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c7:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c6 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c16 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  />
  <div
    className="c2"
    data-mocked="Box"
  >
    <div
      className="c3"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c4"
      >
        <div
          className="c5"
        >
          <div
            className="c6"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <Panel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c8"
      data-mocked="Box"
    >
      <div
        className="c9"
        data-mocked="Box"
        padding="xxs"
      >
        <div
          className="c10"
          data-mocked="SpaceBetween"
          direction="horizontal"
          size="xxs"
        >
          <div
            data-mocked="ButtonDropdown"
            data-testid="view-options"
            items={
              Array [
                Object {
                  "iconSvg": <SvgChecked />,
                  "id": "MotionIndicator",
                  "text": "Motion indicator",
                },
              ]
            }
            onItemClick={[Function]}
          >
            View Options
          </div>
        </div>
      </div>
      <div
        className="c11"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c12"
          >
            <div
              className="c13"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills
                </p>
              </div>
            </div>
          </div>
          <div
            className="c2"
            data-mocked="Box"
          >
            <div
              className="c8"
              data-mocked="Box"
            >
              <div
                className="c11"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c14"
      data-mocked="Box"
    >
      <div
        className="c15"
      >
        <div
          className="c5"
        >
          <div
            className="c16"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`ViewCursorWidget should render correctly with move style 1`] = `
.c13 {
  width: 600px;
  margin: auto;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 1000;
}

.c0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  width: 100%;
  height: 100%;
  background-color: colorBackgroundLayoutMain;
}

.c1 {
  background-color: colorBackgroundContainerHeader;
  z-index: 100;
}

.c2 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  position: relative;
  overflow: hidden;
}

.c8 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.c9 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  background-color: colorBackgroundContainerContent;
}

.c11 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow: hidden;
  padding: 4px;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c12 {
  position: absolute;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 1000;
  background-color: rgba(0,0,0,0.7);
}

.c3 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  z-index: 99;
}

.c14 {
  background-color: colorBackgroundContainerContent;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  height: 100%;
}

.c10 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  -webkit-box-pack: right;
  -webkit-justify-content: right;
  -ms-flex-pack: right;
  justify-content: right;
}

.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row-reverse;
  -ms-flex-direction: row-reverse;
  flex-direction: row-reverse;
  -webkit-align-items: stretch;
  -webkit-box-align: stretch;
  -ms-flex-align: stretch;
  align-items: stretch;
  height: 100%;
}

.c5 {
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.c7 {
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  border-left: 1px solid colorBorderDividerDefault;
  border-right: 1px solid colorBorderDividerDefault;
}

.c7:hover {
  background-color: colorBackgroundDropdownItemHover;
}

.c6 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

.c16 {
  width: 400px;
  height: 100%;
  overflow-y: auto;
}

<div
  className="c0"
  data-mocked="Box"
>
  <div
    className="c1"
    data-mocked="Box"
  />
  <div
    className="c2"
    data-mocked="Box"
  >
    <div
      className="c3"
      data-mocked="Box"
      isFloating={false}
    >
      <div
        className="c4"
      >
        <div
          className="c5"
        >
          <div
            className="c6"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <Panel />,
                    "id": "Hierarchy",
                    "label": "Hierarchy",
                  },
                  Object {
                    "content": <SceneRulesPanel />,
                    "id": "Rules",
                    "label": "Rules",
                  },
                  Object {
                    "content": <SettingsPanel />,
                    "id": "Settings",
                    "label": "Settings",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-left"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
    <div
      className="c8"
      data-mocked="Box"
    >
      <div
        className="c9"
        data-mocked="Box"
        padding="xxs"
      >
        <div
          className="c10"
          data-mocked="SpaceBetween"
          direction="horizontal"
          size="xxs"
        >
          <div
            data-mocked="ButtonDropdown"
            data-testid="view-options"
            items={
              Array [
                Object {
                  "iconSvg": <SvgChecked />,
                  "id": "MotionIndicator",
                  "text": "Motion indicator",
                },
              ]
            }
            onItemClick={[Function]}
          >
            View Options
          </div>
        </div>
      </div>
      <div
        className="c11"
        data-mocked="Box"
      >
        <div
          className="c0"
          data-mocked="Box"
        >
          <div
            className="c12"
          >
            <div
              className="c13"
              data-mocked="Container"
            >
              <div>
                <div
                  data-mocked="Header"
                  variant="h2"
                >
                  Error
                </div>
              </div>
              <div
                data-mocked="TextContent"
              >
                <p>
                  This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills
                </p>
              </div>
            </div>
          </div>
          <div
            className="c2"
            data-mocked="Box"
          >
            <div
              className="c8"
              data-mocked="Box"
            >
              <div
                className="c11"
                data-mocked="Box"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      className="c14"
      data-mocked="Box"
    >
      <div
        className="c15"
      >
        <div
          className="c5"
        >
          <div
            className="c16"
          >
            <div
              className="sidePanelTabs"
              data-mocked="Tabs"
              tabs={
                Array [
                  Object {
                    "content": <SceneNodeInspectorPanel />,
                    "id": "Inspector",
                    "label": "Inspector",
                  },
                ]
              }
            />
          </div>
        </div>
        <div
          className="c7"
          data-testid="handle"
          onClick={[Function]}
        >
          <div
            data-mocked="Icon"
            name="angle-right"
            size="small"
            variant="normal"
          />
        </div>
      </div>
    </div>
  </div>
</div>
`;
