// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityGroup EntityGroup component should not render motion indicator when it is not visible 1`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "MotionIndicator",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  />
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render child views 1`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "Tag",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="AnchorComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"childRefs":["mock-child-tag-node"],"components":[{"ref":"mock-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}]},"component":{"ref":"mock-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  >
    <group
      dispose={null}
      name="ENTITY_GROUP_mock-child-tag-node"
      onPointerDown={[Function]}
      onPointerUp={[Function]}
      position={
        Array [
          1,
          1,
          1,
        ]
      }
      rotation={
        Euler {
          "_order": "XYZ",
          "_x": 2,
          "_y": 2,
          "_z": 2,
        }
      }
      scale={
        Array [
          3,
          3,
          3,
        ]
      }
      userData={
        Object {
          "componentTypes": Array [
            "Tag",
          ],
          "nodeRef": "mock-child-tag-node",
        }
      }
    >
      <group
        name="ENTITY_GROUP_mock-child-tag-node_COMPONENTS"
      >
        <div
          data-testid="AnchorComponent"
        >
          [{"node":{"ref":"mock-child-tag-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-child-tag-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}]},"component":{"ref":"mock-child-tag-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}},{}]
        </div>
      </group>
      <group
        name="ENTITY_GROUP_mock-child-tag-node_CHILDREN"
      />
    </group>
  </group>
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 1`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "ModelRef",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="GLTFModelComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"ModelRef","uri":"mock/uri","modelType":"GLB"}]},"component":{"ref":"mock-comp","type":"ModelRef","uri":"mock/uri","modelType":"GLB"},"hiddenWhileImmersive":false},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 2`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "Camera",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="CameraComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"Camera","cameraType":"Orthographic","near":2,"far":4}]},"component":{"ref":"mock-comp","type":"Camera","cameraType":"Orthographic","near":2,"far":4}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 3`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "Light",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="LightComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"Light","lightType":"Directional","lightSettings":{"color":16711680,"intensity":3,"castShadow":true}}]},"component":{"ref":"mock-comp","type":"Light","lightType":"Directional","lightSettings":{"color":16711680,"intensity":3,"castShadow":true}}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 4`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "Tag",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="AnchorComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}]},"component":{"ref":"mock-comp","type":"Tag","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 5`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "ModelShader",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="ColorOverlayComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"ModelShader","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}]},"component":{"ref":"mock-comp","type":"ModelShader","valueDataBinding":{"dataBindingContext":{"a":"abc"}}}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 6`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "MotionIndicator",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="MotionIndicatorComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"MotionIndicator","shape":"LinearPlane","valueDataBindings":{},"config":{"numOfRepeatInY":2,"backgroundColorOpacity":1}}]},"component":{"ref":"mock-comp","type":"MotionIndicator","shape":"LinearPlane","valueDataBindings":{},"config":{"numOfRepeatInY":2,"backgroundColorOpacity":1}}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 7`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        "Viewpoint",
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  >
    <div
      data-testid="ViewpointComponent"
    >
      [{"node":{"ref":"mock-node","transform":{"position":[1,1,1],"rotation":[2,2,2],"scale":[3,3,3]},"properties":{},"components":[{"ref":"mock-comp","type":"Viewpoint","skyboxImages":["mockedImage.jpg"],"cameraPosition":[0,0,0],"skyboxImageFormat":"SixSided"}]}},{}]
    </div>
  </group>
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;

exports[`EntityGroup EntityGroup component should render different component views 8`] = `
<group
  dispose={null}
  name="ENTITY_GROUP_mock-node"
  onPointerDown={[Function]}
  onPointerUp={[Function]}
  position={
    Array [
      1,
      1,
      1,
    ]
  }
  rotation={
    Euler {
      "_order": "XYZ",
      "_x": 2,
      "_y": 2,
      "_z": 2,
    }
  }
  scale={
    Array [
      3,
      3,
      3,
    ]
  }
  userData={
    Object {
      "componentTypes": Array [
        undefined,
      ],
      "nodeRef": "mock-node",
    }
  }
>
  <group
    name="ENTITY_GROUP_mock-node_COMPONENTS"
  />
  <group
    name="ENTITY_GROUP_mock-node_CHILDREN"
  />
</group>
`;
